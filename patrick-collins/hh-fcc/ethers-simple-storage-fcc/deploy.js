const ethers = require("ethers");
const fs = require("fs-extra");
const { Contract } = require("ethers");

require("dotenv").config();

async function main() {
  console.log("PRIVATE_KEY:", process.env.PRIVATE_KEY);

  const provider = new ethers.JsonRpcProvider(process.env.RPC_URL_GANACHE);

  await provider.getBlockNumber().then((blockNumber) => {
    console.log("blockNumber:", blockNumber);
  });

  balance = await provider.getBalance(
    "0x9aa6438754aC5ceE4C910B0956828E02076AaEFF"
  );
  console.log("balance:", balance);

  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");

  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  // Create a contract
  const contract = new Contract(
    "0x6E01c1881CbC94f73D6143f139BE9AeD18615D3F",
    abi,
    provider
  );

  const address = await contract.getAddress();
  console.log("contract address:", address);

  const tx = {
    nonce: 1,
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data:
      "0x" +
      "6080604052348015600e575f80fd5b505f8081905550610963806100225f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c8063722713f711610059578063722713f7146100fe5780638bab8dd51461011c5780639e7a13ad1461014c578063e45c77391461017d57610086565b80632e64cec11461008a578063471f7cdf146100a85780636057361d146100c65780636f760f41146100e2575b5f80fd5b610092610187565b60405161009f919061032a565b60405180910390f35b6100b061018f565b6040516100bd919061032a565b60405180910390f35b6100e060048036038101906100db919061037e565b610194565b005b6100fc60048036038101906100f791906104e5565b61019d565b005b610106610221565b604051610113919061032a565b60405180910390f35b6101366004803603810190610131919061053f565b610228565b604051610143919061032a565b60405180910390f35b6101666004803603810190610161919061037e565b610255565b6040516101749291906105e6565b60405180910390f35b61018561030a565b005b5f8054905090565b5f5481565b805f8190555050565b6002604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010190816101f7919061080e565b5050508060018360405161020b9190610917565b9081526020016040518091039020819055505050565b5f47905090565b6001818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b60028181548110610264575f80fd5b905f5260205f2090600202015f91509050805f01549080600101805461028990610641565b80601f01602080910402602001604051908101604052809291908181526020018280546102b590610641565b80156103005780601f106102d757610100808354040283529160200191610300565b820191905f5260205f20905b8154815290600101906020018083116102e357829003601f168201915b5050505050905082565b5f8081905550565b5f819050919050565b61032481610312565b82525050565b5f60208201905061033d5f83018461031b565b92915050565b5f604051905090565b5f80fd5b5f80fd5b61035d81610312565b8114610367575f80fd5b50565b5f8135905061037881610354565b92915050565b5f602082840312156103935761039261034c565b5b5f6103a08482850161036a565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103f7826103b1565b810181811067ffffffffffffffff82111715610416576104156103c1565b5b80604052505050565b5f610428610343565b905061043482826103ee565b919050565b5f67ffffffffffffffff821115610453576104526103c1565b5b61045c826103b1565b9050602081019050919050565b828183375f83830152505050565b5f61048961048484610439565b61041f565b9050828152602081018484840111156104a5576104a46103ad565b5b6104b0848285610469565b509392505050565b5f82601f8301126104cc576104cb6103a9565b5b81356104dc848260208601610477565b91505092915050565b5f80604083850312156104fb576104fa61034c565b5b5f83013567ffffffffffffffff81111561051857610517610350565b5b610524858286016104b8565b92505060206105358582860161036a565b9150509250929050565b5f602082840312156105545761055361034c565b5b5f82013567ffffffffffffffff81111561057157610570610350565b5b61057d848285016104b8565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6105b882610586565b6105c28185610590565b93506105d28185602086016105a0565b6105db816103b1565b840191505092915050565b5f6040820190506105f95f83018561031b565b818103602083015261060b81846105ae565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061065857607f821691505b60208210810361066b5761066a610614565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106cd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610692565b6106d78683610692565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61071261070d61070884610312565b6106ef565b610312565b9050919050565b5f819050919050565b61072b836106f8565b61073f61073782610719565b84845461069e565b825550505050565b5f90565b610753610747565b61075e818484610722565b505050565b5b81811015610781576107765f8261074b565b600181019050610764565b5050565b601f8211156107c65761079781610671565b6107a084610683565b810160208510156107af578190505b6107c36107bb85610683565b830182610763565b50505b505050565b5f82821c905092915050565b5f6107e65f19846008026107cb565b1980831691505092915050565b5f6107fe83836107d7565b9150826002028217905092915050565b61081782610586565b67ffffffffffffffff8111156108305761082f6103c1565b5b61083a8254610641565b610845828285610785565b5f60209050601f831160018114610876575f8415610864578287015190505b61086e85826107f3565b8655506108d5565b601f19841661088486610671565b5f5b828110156108ab57848901518255600182019150602085019450602081019050610886565b868310156108c857848901516108c4601f8916826107d7565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6108f182610586565b6108fb81856108dd565b935061090b8185602086016105a0565b80840191505092915050565b5f61092282846108e7565b91508190509291505056fea2646970667358221220151dd83a499c665176c25d36c6ec183889b4ca1693096a92ce57485038ba05f764736f6c634300081a0033",
    chainId: 111555111,
  };

  const signedTransaction = await wallet.signTransaction(tx);
  console.log("signedTransaction: ", signedTransaction);

  const signer = await provider.getSigner();
  const factory = new ethers.ContractFactory(abi, binary, signer);

  const contract2 = await factory.deploy({ gasLimit: 3000000 });
  console.log("contract2:", contract2);

  // interact with the contract
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
