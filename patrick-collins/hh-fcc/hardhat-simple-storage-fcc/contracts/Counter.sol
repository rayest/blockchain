// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";

/**
 * @dev Example contract, use the Forwarder as needed for additional security.
 *
 * @notice important to implement {AutomationCompatibleInterface}
 */

contract Counter is AutomationCompatibleInterface {
    /**
     * Public counter variable
     */
    uint256 public counter;

    /**
     * Use an interval in seconds and a timestamp to slow execution of Upkeep
     */
    uint256 public immutable interval;
    uint256 public lastTimeStamp;

    constructor(uint256 updateInterval) {
        interval = updateInterval;
        lastTimeStamp = block.timestamp;

        counter = 0;
    }

    //  checkUpkeep 用于检查是否需要执行维护任务。如果返回 true，则 performUpkeep 将被调用。
    // 在该例中，我们检查上次维护任务执行时间是否超过了 interval。
    function checkUpkeep(
        bytes calldata c_checkData
    )
        external
        view
        override
        returns (bool upkeepNeeded, bytes memory c_performData)
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    //  performUpkeep 用于执行维护任务。如果 checkUpkeep 返回 true，则 performUpkeep 将被调用。
    // 使用场景是：当链下数据发生变化时，链上合约需要执行某些操作。
    // 在该例子中，我们每隔 interval 秒，将 counter 加 1。
    function performUpkeep(bytes calldata c_performData) external override {
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }
}
